# Prism Analytics Engine - Docker Compose Configuration
# Complete multi-service setup for production deployment

version: '3.8'

services:
  # ===============================================
  # Main Application Service
  # ===============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    container_name: prism-analytics-app
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      # Flask Configuration
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY}
      - HOST=0.0.0.0
      - PORT=5000
      
      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      
      # API Keys
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - LASTFM_API_KEY=${LASTFM_API_KEY}
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      
      # Application Settings
      - CONTACT_EMAIL=${CONTACT_EMAIL:-contact@precise.digital}
      - MAX_BULK_ISRCS=${MAX_BULK_ISRCS:-1000}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      
      # Feature Flags
      - ENABLE_YOUTUBE_INTEGRATION=${ENABLE_YOUTUBE_INTEGRATION:-true}
      - ENABLE_PDF_EXPORT=${ENABLE_PDF_EXPORT:-true}
      - ENABLE_ADVANCED_ANALYTICS=${ENABLE_ADVANCED_ANALYTICS:-true}
      
      # Security
      - CORS_ORIGINS=${CORS_ORIGINS:-}
      
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_exports:/app/exports
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - prism-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===============================================
  # PostgreSQL Database Service
  # ===============================================
  postgres:
    image: postgres:15-alpine
    container_name: prism-analytics-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-precise_leads}
      - POSTGRES_USER=${POSTGRES_USER:-precise_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    networks:
      - prism-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-precise_user} -d ${POSTGRES_DB:-precise_leads}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===============================================
  # Redis Cache Service
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: prism-analytics-cache
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    networks:
      - prism-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ===============================================
  # Nginx Reverse Proxy (Optional)
  # ===============================================
  nginx:
    image: nginx:alpine
    container_name: prism-analytics-proxy
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - app
    
    networks:
      - prism-network
    
    profiles:
      - production

  # ===============================================
  # Background Worker (Optional)
  # ===============================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: prism-analytics-worker
    restart: unless-stopped
    command: python -m celery worker -A src.worker.celery_app --loglevel=info
    
    environment:
      # Same environment as main app
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - LASTFM_API_KEY=${LASTFM_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - prism-network
    
    profiles:
      - workers

  # ===============================================
  # Monitoring Services (Optional)
  # ===============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prism-analytics-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - prism-network
    
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: prism-analytics-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - prism-network
    
    profiles:
      - monitoring

# ===============================================
# Named Volumes
# ===============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  app_exports:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===============================================
# Networks
# ===============================================
networks:
  prism-network:
    driver: bridge
    name: prism-analytics-network